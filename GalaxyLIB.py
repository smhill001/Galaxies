# -*- coding: utf-8 -*-
"""
Created on Wed Feb 08 09:21:01 2017

    This library is intended to read, manipulate and write extra-galactic
    HII location data. Observational data is generated by point-and-click
    means from Aladin. GalaxyPlotScript.py calls these classes and functions.

@author: Astronomy
"""
import sys
drive='f:'
sys.path.append(drive+'\\Astronomy\Python Play\Util')

import ConfigFiles as CF

class ObsDataList(CF.readtextfilelines):
    """
    This class is the container for a list of objects taken from an ASCII
    catalog. In this case, it is configured to read a list of HII regions 
    that have been manually tagged in Aladin. It could be extended to 
    read from professional catalogs, either as exported by Aladin or directly
    from the Web.
    
    Another addition here could be photometric data for HII regions. 
    
    
    SMH 1/9/18
    SMH 2/21/19 - updated to use Utils library
    """
    pass
    def loadcatalog(self):
#Object,Cont_Flag,RAJ2000,DEJ2000,X,Y,Label_Flag,Info        
        FirstTime=True
        self.ObjectIdentifierDD=[]
        self.Cont_Flag=[]
        self.RAJ2000=[]
        self.DEJ2000=[]
        self.X=[]
        self.Y=[]
        self.Label_Flag=[]
        self.Info=[]
        self.NObs=0
        
        for recordindex in range(1,self.nrecords):
            fields=self.CfgLines[recordindex].split(',')
            self.ObjectIdentifierDD.extend([str(fields[0])])
            self.Cont_Flag.extend([str(fields[1])])
            self.RAJ2000.extend([float(fields[2])])
            self.DEJ2000.extend([float(fields[3])])
            self.X.extend([float(fields[4])])
            self.Y.extend([float(fields[5])])
            self.Label_Flag.extend([str(fields[6])])
            self.Info.extend([str(fields[7])])
            self.NObs=self.NObs+1
        print self.NObs
                
def PlotHII(Target,X_data,Y_data,plotparams):                
#Plot Layout Configuration
    import pylab as pl
    import numpy as np
    
    pl.grid()
    pl.xlim(plotparams.X0,plotparams.X1)
    pl.xticks(np.arange(plotparams.X0,plotparams.X1+.000001,plotparams.DX))
    pl.ylim(plotparams.Y0,plotparams.Y1)
    pl.yticks(np.arange(plotparams.Y0,plotparams.Y1+.000001,plotparams.DY))  
    pl.tick_params(axis='both', which='major', labelsize=7)
    
    pl.title("H II Radial Distribution",fontsize=9)
    if plotparams.PlotType == "POSHist":
        pl.hist(X_data,bins=Y_data,label=Target)
        pl.ylabel(r"$H$ $II$ $Region$ $(Count)$",fontsize=7)
    elif plotparams.PlotType == "POSDens":
        p=pl.plot(X_data,Y_data,label=Target,marker='.',linewidth=1.0)
        pl.xlabel(r"$Radius$ $(arcmin)$",fontsize=7)
        pl.ylabel(r"$H$ $II$ $Region$ $(Count)$",fontsize=7)
        print "COLOR=",p[0].get_color()

    elif plotparams.PlotType == "POSLoc":
        pl.xlabel(r"$Delta$ $RA$ $(arcmin)$",fontsize=7)
        pl.ylabel(r"$Delta$ $DE$ $(arcmin)$",fontsize=7)
        pl.title("H II Location Distribution",fontsize=9)
        pl.scatter(X_data,Y_data,label=Target,marker='o',edgecolor="#1f77b4",
                   linewidth =1.0,facecolor="") 
        
    pl.legend(loc=1,ncol=2, borderaxespad=0.,prop={'size':6})        

    return 0        